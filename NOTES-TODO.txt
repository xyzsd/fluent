

MASTER TO DO LIST
=================
(0) BUGS
    all tests passed

(1) Parser:
    now SIMD and SWAR. SIMD will automatically activate if it can.
    SIMD has more acclerators than SWAR, including improvements in:
        finding/validating identifiers
        getting TextSlices (important for general parsing)

    TODO:
        * implement SWAR isblank() for getTextSlice()
        * implement (a working..) SIMD skipBlankBlockNLC()

(2) function tests
    this is a very large test surface, so we may only test essentials
    core (implicit) functions (NUMBER, DATETIME), and LIST should be tested thoroughly

    TODO:
        * continue to implement tests
            temporal: DONE
            string: CaseFn
            numeric:
                Abs
                Number  DONE
                Offset
                Sign
            booleanFn
            list:
                ListFn  DONE
                Count
                NumSort
                StringSort

    TODO:
        * and tests as examples:
            - function renaming
            - implicit replacement (e.g., DATETIME with TEMPORAL)
            - simple implicit functions via lambdas
            - setting default options for a function
            - select on a list (we can't) by splitting up into two or more messages

(3) FluentBundle
    * formatPattern : make public, document, finalize method/params
    * finalize FmtBuilder
    * BundleException for exceptions as needed
    * documentation improvements

(4) SpotBugs
    * disable for test classes
    * seems to be wonky/not always executing in gradle; investigate

(5) Look at all TODOs

(6) Documentation updates/revisions
    ** use new format : see NumberFn/ExtractTemporalFn
    ** continuing work on documentation

(10) EXAMPLES in documentation on github OR in (need to create?) wiki
        * why Fluent vs. ICU::MF or MF2
        * list support & why that's important
        * how to read in FTL
        * how to replace DATETIME with TEMPORAL
        * locale fallback (see below)
        * setting default options for a formatter
        * etc.

(15) Performance
    * better JMH tests for parser
    * JMH tests for message rendering
        * effects of caching/cache performance
        * focus on common methods
            String, Numbers, Lists, DateTime/Temporal
        * should also measure effects of caching
    * (lower priority) investigate potential AST optimizations
        in particular, TextSlices. getTextSlice() can create a lot of zero-length or 1-character slices.
            make sure we are combining these or eliminating these as needed, if we can.

(16) advanced thoughts/performance
    * for rendering performance: bytecode generation or (likely easier) use StringConcatFactory (?)
        https://github.com/mtumilowicz/java9-string-concat?tab=readme-ov-file
        https://kotlinlang.org/docs/whatsnew1520.html#string-concatenation-via-invokedynamic
    * careful presizing of stringbuilders ?

(20) Locale fallback
     just use ICU:LocaleMatcher
        ICU:LocaleMatcher.Builder
     this would be provided by (end-user-supplied!)
        * directly specified in code
        * or, supplied by a configuration file with supported locales
        * or, by scanning file system/classpath
     LocaleMatcher.getBestLocale() to get closest-matching Locale

     NOTE: this is all handled by ICU; we should give an example BUT not much to code here.

     using LocaleMatcher, get tags, and file/resource would be:
         *  recommend a naming format: (tentative):
             myFtlFile_en-GB.ftl
             {basename}_{languagetag}.{extension}




