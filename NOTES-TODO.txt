

primary to-do list and notes/thoughts
=====================================

* Finalize FluentBundle
    * formatPattern : make public, document, finalize method/params
    * finalize FmtBuilder
    * BundleException for exceptions as needed
    * documentation improvements

* DOCUMENTATION updates/revisions
    * use new format : see NumberFn/ExtractTemporalFn
    * continuing work on documentation
    * wiki/readme for:
        - why Fluent vs. ICU::MF or MF2
        - list support & why that's important
        - how to read in FTL
        - locale fallback (see below)
        - why should not use for critical controls :)

* EXAMPLES
    * fluent-examples are NOT IN SYNC -- they are using old code base.
    * provide examples (wiki?, but definitely in fluent-examples)
        - renaming built-in functions
        - replacing implicit functions (e.g., DATETIME with TEMPORAL)
        - simple implicit functions via lambdas
        - how to set default options for a function
        - how to select on a list (cannot!!) but show how it can be accomplished by splitting messages into
            formatting items and selection

* solidify lowest JDK we can target. 21 ?
    though SIMD improvements in successive JDKs could help

* feature flag or method to disable SIMD
    * ? at compilation
    * at runtime
    * would also be nice for testing

* SWAR/SIMD
    * code improvements
        * SIMD blend overkill for skipBlankBlock
    * CRLF detection: determine best approach: load 2 vectors vs. shifting masks.
    * doc notes: SIMD will activate if possible, otherwise SWAR. not as many SWAR accelerations (more scalar code)
    * implement SWAR isBlank() for getTextSlice() [may wait until post-2.0 version]

* FEATURE HIGHLIGHTS
    - simd/swar
    - list handling

* SpotBugs
    * disable for test classes, jmh classes
    * seems to be wonky/not always executing in gradle; investigate [may be improved with gradle 9]

* Performance
    * need better integration with intellij profiling
    * more & better measurements
    * JMH tests for message rendering
        * effects of caching/cache performance
        * focus on common methods
            String, Numbers, Lists, DateTime/Temporal
        * should also measure effects of caching
    * (lower priority) investigate potential AST optimizations
        in particular, TextSlices. getTextSlice() can create a lot of zero-length or 1-character slices.
            make sure we are combining these or eliminating these as needed, if we can. Or skip if possible.
    * for future rendering performance: bytecode generation or (likely easier) use StringConcatFactory (?)
        https://github.com/mtumilowicz/java9-string-concat?tab=readme-ov-file
        https://kotlinlang.org/docs/whatsnew1520.html#string-concatenation-via-invokedynamic
    * careful presizing of stringbuilders ?

* Locale fallback
     just use ICU:LocaleMatcher
        ICU:LocaleMatcher.Builder
     this would be provided by (end-user-supplied!)
        * directly specified in code
        * or, supplied by a configuration file with supported locales
        * or, by scanning file system/classpath
     LocaleMatcher.getBestLocale() to get closest-matching Locale

     NOTE: this is all handled by ICU; we should give an example BUT not much to code here.

     using LocaleMatcher, get tags, and file/resource would be:
         *  recommend a naming format: (tentative):
             myFtlFile_en-GB.ftl
             {basename}_{languagetag}.{extension}


* release notification reddit / also to fluent group (GH project)

