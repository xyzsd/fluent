

MASTER TO DO LIST
=================

(1) Parser:
    Option.if() check, Optional usage

(2) function tests
    this is a very large test surface, so we may only test essentials
    expected functions (NUMBER, DATETIME), and LIST should be tested thoroughly

    tests should be both functional and to illustrate examples

    also show combination of functions (likely in a separate test)

(3) FluentBundle
    * formatPattern : make public, document, finalize method/params
    * finalize FmtBuilder
    * BundleException for exceptions as needed
    * documentation improvements

(4) SpotBugs
    * disable for test classes
    * seems to be wonky/not always executing in gradle; investigate

(5) Look at all TODOs

(6) Documentation updates/revisions
    initial documentation completed
    top level documentation should be clear and helpful
    make sure important methods are also well documented

(...)

(10) EXAMPLES in documentation on github OR in (need to create?) wiki
        * why Fluent vs. ICU::MF or MF2
        * list support & why that's important
        * how to read in FTL
        * how to replace DATETIME with TEMPORAL
        * locale fallback (see below)
        * setting default options for a formatter
        * etc.

(15) Performance
    * JMH tests for parser
    * JMH tests for message rendering
        * effects of caching/cache performance
        * focus on common methods
            String, Numbers, Lists, DateTime/Temporal
        * should also measure effects of caching
    * (lower priority) investigate potential AST optimizations

(20) Locale fallback
     just use ICU:LocaleMatcher
        ICU:LocaleMatcher.Builder
     this would be provided by (end-user-supplied!)
        * directly specified in code
        * or, supplied by a configuration file with supported locales
        * or, by scanning file system/classpath
     LocaleMatcher.getBestLocale() to get closest-matching Locale

     NOTE: this is all handled by ICU; we should give an example BUT not much to code here.

     using LocaleMatcher, get tags, and file/resource would be:
         *  recommend a naming format: (tentative):
             myFtlFile_en-GB.ftl
             {basename}_{languagetag}.{extension}




